# Generated by Django 5.1.7 on 2025-04-09 09:14

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='resultatAnimal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maladie', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=255)),
                ('commune', models.CharField(max_length=255)),
                ('village', models.CharField(max_length=255)),
                ('numero_animal_preleve', models.CharField(max_length=255)),
                ('espece_prelevee', models.CharField(max_length=255)),
                ('race', models.CharField(max_length=255)),
                ('sexe', models.CharField(max_length=10)),
                ('classe_age', models.CharField(max_length=100)),
                ('vaccine', models.BooleanField(default=False)),
                ('marque', models.BooleanField(default=False)),
                ('resultat_labo', models.CharField(blank=True, max_length=255, null=True)),
                ('densite_optique', models.FloatField(blank=True, null=True)),
                ('statut', models.CharField(max_length=255)),
                ('type_enquete', models.CharField(choices=[('T0', 'T0'), ('T1', 'T1'), ('T2', 'T2')], default='T0', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ResultatCommune',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_enquete', models.CharField(choices=[('T0', 'T0'), ('T1', 'T1'), ('T2', 'T2')], max_length=100)),
                ('region', models.CharField(max_length=255)),
                ('commune', models.CharField(max_length=255)),
                ('somme_prob_village', models.FloatField()),
                ('nb_total_village_com', models.IntegerField()),
                ('nb_village_echan_com', models.IntegerField()),
                ('prob_commune', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ResultatNational',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_enquete', models.CharField(choices=[('T0', 'T0'), ('T1', 'T1'), ('T2', 'T2')], max_length=100)),
                ('taux_prevalence_nationale', models.FloatField()),
                ('erreur_standard', models.FloatField()),
                ('intervalle_confiance_inferieur', models.FloatField()),
                ('intervalle_confiance_superieur', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ResultatRegion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_enquete', models.CharField(choices=[('T0', 'T0'), ('T1', 'T1'), ('T2', 'T2')], max_length=100)),
                ('region', models.CharField(max_length=255)),
                ('nb_com_ech', models.IntegerField()),
                ('nb_com_region', models.IntegerField()),
                ('somme_prob_commune_par_region', models.FloatField()),
                ('proportion_poids_region_pays', models.FloatField()),
                ('ponderation_prevalence_relative', models.FloatField()),
                ('variance_relative', models.FloatField()),
                ('prevalence_estimee', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ResultatVillage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_enquete', models.CharField(choices=[('T0', 'T0'), ('T1', 'T1'), ('T2', 'T2')], max_length=100)),
                ('region', models.CharField(max_length=255)),
                ('commune', models.CharField(max_length=255)),
                ('village', models.CharField(max_length=255)),
                ('positif', models.IntegerField()),
                ('negatif', models.IntegerField()),
                ('douteux', models.IntegerField()),
                ('effectif_preleve_valable', models.IntegerField()),
                ('prob', models.FloatField()),
            ],
        ),
    ]
